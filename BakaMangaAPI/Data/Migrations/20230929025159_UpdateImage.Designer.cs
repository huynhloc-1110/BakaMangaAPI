// <auto-generated />
using System;
using BakaMangaAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BakaMangaAPI.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230929025159_UpdateImage")]
    partial class UpdateImage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserApplicationUser", b =>
                {
                    b.Property<string>("FollowersId")
                        .HasColumnType("text");

                    b.Property<string>("FollowingsId")
                        .HasColumnType("text");

                    b.HasKey("FollowersId", "FollowingsId");

                    b.HasIndex("FollowingsId");

                    b.ToTable("ApplicationUserApplicationUser");
                });

            modelBuilder.Entity("ApplicationUserManga", b =>
                {
                    b.Property<string>("FollowedMangasId")
                        .HasColumnType("text");

                    b.Property<string>("FollowersId")
                        .HasColumnType("text");

                    b.HasKey("FollowedMangasId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("ApplicationUserManga");
                });

            modelBuilder.Entity("AuthorManga", b =>
                {
                    b.Property<string>("AuthorsId")
                        .HasColumnType("text");

                    b.Property<string>("MangasId")
                        .HasColumnType("text");

                    b.HasKey("AuthorsId", "MangasId");

                    b.HasIndex("MangasId");

                    b.ToTable("AuthorManga");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("BakaMangaAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("text");

                    b.Property<string>("BannerPath")
                        .HasColumnType("text");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BakaMangaAPI.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Chapter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<string>("MangaId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<float>("Number")
                        .HasColumnType("real");

                    b.Property<string>("UploaderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UploadingGroupId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.HasIndex("UploaderId");

                    b.HasIndex("UploadingGroupId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentCommentId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Comment");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("text");

                    b.Property<string>("BannerPath")
                        .HasColumnType("text");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsMangaGroup")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.GroupMember", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("GroupRoles")
                        .HasColumnType("integer");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("GroupId", "UserId")
                        .IsUnique();

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Image");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Manga", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AlternativeTitles")
                        .HasColumnType("text");

                    b.Property<string>("CoverPath")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("OriginalLanguage")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("PublishYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Mangas");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.MangaList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("MangaLists");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.MangaListFollower", b =>
                {
                    b.Property<string>("MangaListID")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("FollowedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MangaListID", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MangaListFollowers");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.MangaListItem", b =>
                {
                    b.Property<string>("MangaListId")
                        .HasColumnType("text");

                    b.Property<string>("MangaId")
                        .HasColumnType("text");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.HasKey("MangaListId", "MangaId");

                    b.HasIndex("MangaId");

                    b.ToTable("MangaListItems");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Rating", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MangaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.HasIndex("UserId", "MangaId")
                        .IsUnique();

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.React", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReactFlag")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reacts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("React");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Report", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ReporterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.ToTable("Reports");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Report");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Request", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Request");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.View", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Views");

                    b.HasDiscriminator<string>("Discriminator").HasValue("View");
                });

            modelBuilder.Entity("CategoryManga", b =>
                {
                    b.Property<string>("CategoriesId")
                        .HasColumnType("text");

                    b.Property<string>("MangasId")
                        .HasColumnType("text");

                    b.HasKey("CategoriesId", "MangasId");

                    b.HasIndex("MangasId");

                    b.ToTable("CategoryManga");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BakaMangaAPI.Models.ChapterComment", b =>
                {
                    b.HasBaseType("BakaMangaAPI.Models.Comment");

                    b.Property<string>("ChapterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ChapterId");

                    b.HasDiscriminator().HasValue("ChapterComment");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.ChapterImage", b =>
                {
                    b.HasBaseType("BakaMangaAPI.Models.Image");

                    b.Property<string>("ChapterId")
                        .HasColumnType("text");

                    b.HasIndex("ChapterId");

                    b.HasDiscriminator().HasValue("ChapterImage");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.ChapterReport", b =>
                {
                    b.HasBaseType("BakaMangaAPI.Models.Report");

                    b.Property<string>("ChapterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ChapterId");

                    b.HasDiscriminator().HasValue("ChapterReport");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.ChapterView", b =>
                {
                    b.HasBaseType("BakaMangaAPI.Models.View");

                    b.Property<string>("ChapterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ChapterId", "UserId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("ChapterView");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.CommentReact", b =>
                {
                    b.HasBaseType("BakaMangaAPI.Models.React");

                    b.Property<string>("CommentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CommentId", "UserId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("CommentReact");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.CommentReport", b =>
                {
                    b.HasBaseType("BakaMangaAPI.Models.Report");

                    b.Property<string>("CommentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CommentId");

                    b.HasDiscriminator().HasValue("CommentReport");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.MangaComment", b =>
                {
                    b.HasBaseType("BakaMangaAPI.Models.Comment");

                    b.Property<string>("MangaId")
                        .HasColumnType("text");

                    b.HasIndex("MangaId");

                    b.HasDiscriminator().HasValue("MangaComment");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.PostComment", b =>
                {
                    b.HasBaseType("BakaMangaAPI.Models.Comment");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("PostId");

                    b.HasDiscriminator().HasValue("PostComment");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.PostImage", b =>
                {
                    b.HasBaseType("BakaMangaAPI.Models.Image");

                    b.Property<string>("PostId")
                        .HasColumnType("text");

                    b.HasIndex("PostId");

                    b.HasDiscriminator().HasValue("PostImage");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.PostReact", b =>
                {
                    b.HasBaseType("BakaMangaAPI.Models.React");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("PostId", "UserId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("PostReact");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.PostReport", b =>
                {
                    b.HasBaseType("BakaMangaAPI.Models.Report");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("PostId");

                    b.HasDiscriminator().HasValue("PostReport");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.PostView", b =>
                {
                    b.HasBaseType("BakaMangaAPI.Models.View");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("PostId", "UserId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("PostView");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.PromotionRequest", b =>
                {
                    b.HasBaseType("BakaMangaAPI.Models.Request");

                    b.Property<string>("EvidenceLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasDiscriminator().HasValue("PromotionRequest");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.UserReport", b =>
                {
                    b.HasBaseType("BakaMangaAPI.Models.Report");

                    b.Property<string>("ReporteeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ReporteeId");

                    b.HasDiscriminator().HasValue("UserReport");
                });

            modelBuilder.Entity("ApplicationUserApplicationUser", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("FollowingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserManga", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Manga", null)
                        .WithMany()
                        .HasForeignKey("FollowedMangasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthorManga", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BakaMangaAPI.Models.Manga", null)
                        .WithMany()
                        .HasForeignKey("MangasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BakaMangaAPI.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Chapter", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Manga", "Manga")
                        .WithMany("Chapters")
                        .HasForeignKey("MangaId");

                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", "Uploader")
                        .WithMany("UploadedChapters")
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BakaMangaAPI.Models.Group", "UploadingGroup")
                        .WithMany("Chapters")
                        .HasForeignKey("UploadingGroupId");

                    b.Navigation("Manga");

                    b.Navigation("Uploader");

                    b.Navigation("UploadingGroup");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Comment", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Comment", "ParentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.GroupMember", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.MangaList", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", "Owner")
                        .WithMany("MangaLists")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.MangaListFollower", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.MangaList", "MangaList")
                        .WithMany("Followers")
                        .HasForeignKey("MangaListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", "User")
                        .WithMany("MangaListFollowers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MangaList");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.MangaListItem", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Manga", "Manga")
                        .WithMany("MangaListItems")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BakaMangaAPI.Models.MangaList", "MangaList")
                        .WithMany("Items")
                        .HasForeignKey("MangaListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("MangaList");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Post", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Rating", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Manga", "Manga")
                        .WithMany("Ratings")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.React", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", "User")
                        .WithMany("Reacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Report", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", "Reporter")
                        .WithMany("Reports")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Request", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.View", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", "User")
                        .WithMany("Views")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CategoryManga", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BakaMangaAPI.Models.Manga", null)
                        .WithMany()
                        .HasForeignKey("MangasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BakaMangaAPI.Models.ChapterComment", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Chapter", "Chapter")
                        .WithMany("Comments")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.ChapterImage", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Chapter", "Chapter")
                        .WithMany("Images")
                        .HasForeignKey("ChapterId");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.ChapterReport", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Chapter", "Chapter")
                        .WithMany("Reports")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.ChapterView", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Chapter", "Chapter")
                        .WithMany("ChapterViews")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.CommentReact", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Comment", "Comment")
                        .WithMany("Reacts")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.CommentReport", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Comment", "Comment")
                        .WithMany("Reports")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.MangaComment", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Manga", "Manga")
                        .WithMany("Comments")
                        .HasForeignKey("MangaId");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.PostComment", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.PostImage", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Post", "Post")
                        .WithMany("Images")
                        .HasForeignKey("PostId");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.PostReact", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Post", "Post")
                        .WithMany("Reacts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.PostReport", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Post", "Post")
                        .WithMany("Reports")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.PostView", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.Post", "Post")
                        .WithMany("Views")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.UserReport", b =>
                {
                    b.HasOne("BakaMangaAPI.Models.ApplicationUser", "Reportee")
                        .WithMany()
                        .HasForeignKey("ReporteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reportee");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("GroupMembers");

                    b.Navigation("MangaListFollowers");

                    b.Navigation("MangaLists");

                    b.Navigation("Posts");

                    b.Navigation("Ratings");

                    b.Navigation("Reacts");

                    b.Navigation("Reports");

                    b.Navigation("Requests");

                    b.Navigation("UploadedChapters");

                    b.Navigation("UserRoles");

                    b.Navigation("Views");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Chapter", b =>
                {
                    b.Navigation("ChapterViews");

                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Comment", b =>
                {
                    b.Navigation("ChildComments");

                    b.Navigation("Reacts");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Group", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Manga", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Comments");

                    b.Navigation("MangaListItems");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.MangaList", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("BakaMangaAPI.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Reacts");

                    b.Navigation("Reports");

                    b.Navigation("Views");
                });
#pragma warning restore 612, 618
        }
    }
}
